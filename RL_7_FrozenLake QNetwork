{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"RL_7_FrozenLake QNetwork","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMqiJpZdUYfhZgFdVbr8Fyx"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"id":"VvOK0Y2AKccy","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1597474894793,"user_tz":-540,"elapsed":22529,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"290bc121-7eae-45d0-b271-ebd4b37674ec"},"source":["!pip install gym > /dev/null 2>&1\n","!apt-get update > /dev/null 2>&1\n","!apt-get install cmake > /dev/null 2>&1\n","!pip install --upgrade setuptools 2>&1\n","!pip install ez_setup > /dev/null 2>&1\n","!pip install gym[atari] > /dev/null 2>&1"],"execution_count":39,"outputs":[{"output_type":"stream","text":["Requirement already up-to-date: setuptools in /usr/local/lib/python3.6/dist-packages (49.6.0)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VtpMJL4zKdOs","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1597474894794,"user_tz":-540,"elapsed":22522,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}}},"source":["import gym\n","import tensorflow as tf\n","import numpy as np\n","import random\n","import matplotlib\n","import matplotlib.pyplot as plt\n","%matplotlib inline"],"execution_count":40,"outputs":[]},{"cell_type":"code","metadata":{"id":"QnLX9UrrKvp1","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1597474894794,"user_tz":-540,"elapsed":22517,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}}},"source":["env = gym.make(\"FrozenLake-v0\")"],"execution_count":41,"outputs":[]},{"cell_type":"code","metadata":{"id":"9HbVC03xLetB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1597475249508,"user_tz":-540,"elapsed":142400,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"3912cf46-bfb8-46ac-b727-9e6f4a7a2d9c"},"source":["# Input and output size based on the Env\n","input_size = env.observation_space.n\n","output_size = env.action_space.n\n","learning_rate = 0.1\n","\n","# These lines establish the feed-forward part of the network used to\n","# choose actions\n","W = tf.Variable(tf.random.uniform(\n","    (input_size, output_size), 0, 0.01))  # weight\n","\n","def hypothesis(state):\n","  return tf.matmul(state, W)\n","\n","def loss(hypothesis, Y):\n","  return tf.reduce_sum(tf.square(Y - hypothesis))\n","\n","optimizer = tf.keras.optimizers.SGD(learning_rate)\n","\n","def train(state, Y):\n","  with tf.GradientTape() as tape:\n","    y_pred = hypothesis(state)\n","    cost = loss(y_pred, Y)\n","  grads = tape.gradient(cost, [W])\n","  optimizer.apply_gradients(grads_and_vars=zip(grads, [W]))\n","\n","# Set Q-learning related parameters\n","dis = .99\n","num_episodes = 2000\n","\n","# Create lists to contain total rewards and steps per episode\n","rList = []\n","\n","\n","def one_hot(x):\n","    return np.identity(16)[x:x + 1].astype('float32')\n","\n","for i in range(num_episodes):\n","    # Reset environment and get first new observation\n","    s = env.reset()\n","    e = 1. / ((i / 50) + 10)\n","    rAll = 0\n","    done = False\n","    local_loss = []\n","\n","    # The Q-Network training\n","    while not done:\n","        # Choose an action by greedily (with e chance of random action)\n","        # from the Q-network\n","        Qs = hypothesis(one_hot(s)).numpy()\n","        if np.random.rand(1) < e:\n","            a = env.action_space.sample()\n","        else:\n","            a = np.argmax(Qs)\n","\n","        # Get new state and reward from environment\n","        s1, reward, done, _ = env.step(a)\n","        if done:\n","            # Update Q, and no Qs+1, since it's a terminal state\n","            Qs[0, a] = reward\n","        else:\n","            # Obtain the Q_s1 values by feeding the new state through our\n","            # network\n","            Qs1 = hypothesis(one_hot(s1)).numpy()\n","            # Update Q\n","            Qs[0, a] = reward + dis * np.max(Qs1)\n","\n","        # Train our network using target (Y) and predicted Q (Qpred) values\n","        train(one_hot(s), Qs)\n","\n","        rAll += reward\n","        s = s1\n","    rList.append(rAll)\n","\n","print(\"Percent of successful episodes: \" +\n","      str(sum(rList) / num_episodes) + \"%\")\n"],"execution_count":44,"outputs":[{"output_type":"stream","text":["Percent of successful episodes: 0.484%\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OgY552h-5R5N","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1597475044758,"user_tz":-540,"elapsed":172471,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}},"outputId":"4b3581c2-d461-418e-b391-c13553f1589f"},"source":["plt.bar(range(len(rList)), rList, color=\"blue\")\n","plt.show()\n"],"execution_count":43,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"HsU13u-U5_ZJ","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1597475044758,"user_tz":-540,"elapsed":172467,"user":{"displayName":"Byeong-Kwon Kwak","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhyYrOOwzS4HajGL2MZYn86Wi9Z1NnXsqctCFDdzTU=s64","userId":"14422738868340648300"}}},"source":[""],"execution_count":43,"outputs":[]}]}